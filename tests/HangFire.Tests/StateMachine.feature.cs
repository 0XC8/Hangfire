// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HangFire.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class StateMachineFeature : Xunit.IUseFixture<StateMachineFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StateMachine.feature"
#line hidden
        
        public StateMachineFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "State machine", "", ProgrammingLanguage.CSharp, new string[] {
                        "redis"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(StateMachineFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "State machine")]
        [Xunit.TraitAttribute("Description", "State changing filters should be executed in the order they were defined")]
        public virtual void StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("State changing filters should be executed in the order they were defined", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
    testRunner.Given("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
      testRunner.And("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
      testRunner.And("a state changing filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
      testRunner.And("a state changing filter \'second\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter"});
            table1.AddRow(new string[] {
                        "first"});
            table1.AddRow(new string[] {
                        "second"});
#line 10
     testRunner.Then("changing filters should be executed in the following order:", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "State machine")]
        [Xunit.TraitAttribute("Description", "The state changing filters should be able to modify the state")]
        public virtual void TheStateChangingFiltersShouldBeAbleToModifyTheState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The state changing filters should be able to modify the state", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
    testRunner.Given("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
      testRunner.And("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
      testRunner.And("a state changing filter \'first\' that changes the state to the \'AnotherTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
     testRunner.Then("the job state should be changed to \'AnotherTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
      testRunner.And("the \'Test\' state should not be applied to the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
      testRunner.And("the \'AnotherTest\' state should be applied to the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table2.AddRow(new string[] {
                        "State",
                        "AnotherTest"});
#line 23
      testRunner.And("the job\'s state entry should contain the following items:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "State machine")]
        [Xunit.TraitAttribute("Description", "The job history should contain every changed state")]
        public virtual void TheJobHistoryShouldContainEveryChangedState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The job history should contain every changed state", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
    testRunner.Given("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
      testRunner.And("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
      testRunner.And("a state changing filter \'first\' that changes the state to the \'AnotherTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
      testRunner.And("a state changing filter \'second\' that changes the state to the \'YetAnotherTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "State"});
            table3.AddRow(new string[] {
                        "YetAnotherTest"});
            table3.AddRow(new string[] {
                        "AnotherTest"});
            table3.AddRow(new string[] {
                        "Test"});
#line 33
     testRunner.Then("the history for the following states should be added:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "State machine")]
        [Xunit.TraitAttribute("Description", "State applied filters should be executed in the order they were defined")]
        public virtual void StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("State applied filters should be executed in the order they were defined", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
      testRunner.And("a job in the \'Old\' state with registered descriptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
      testRunner.And("a state applied filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
      testRunner.And("a state applied filter \'second\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Method"});
            table4.AddRow(new string[] {
                        "first::OnStateUnapplied"});
            table4.AddRow(new string[] {
                        "second::OnStateUnapplied"});
            table4.AddRow(new string[] {
                        "first::OnStateApplied"});
            table4.AddRow(new string[] {
                        "second::OnStateApplied"});
#line 45
     testRunner.Then("state applied filter methods should be executed in the following order:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "State machine")]
        [Xunit.TraitAttribute("Description", "OnStateUnapplied method should not be called when the state is empty")]
        public virtual void OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OnStateUnapplied method should not be called when the state is empty", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
      testRunner.And("a job with empty state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
      testRunner.And("a state applied filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Method"});
            table5.AddRow(new string[] {
                        "first::OnStateApplied"});
#line 57
     testRunner.Then("state applied filter methods should be executed in the following order:", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                StateMachineFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                StateMachineFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
