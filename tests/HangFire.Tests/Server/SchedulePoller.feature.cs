// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HangFire.Tests.Server
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SchedulePollerFeature : Xunit.IUseFixture<SchedulePollerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SchedulePoller.feature"
#line hidden
        
        public SchedulePollerFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SchedulePoller", "\r\n  As an Administrator (or a Developer), I want the scheduled \r\n  jobs to added " +
                    "to their actual queues when their time has come.", ProgrammingLanguage.CSharp, new string[] {
                        "redis"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(SchedulePollerFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "SchedulePoller")]
        [Xunit.TraitAttribute("Description", "Scheduled jobs should be enqueued on their actual queues")]
        public virtual void ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scheduled jobs should be enqueued on their actual queues", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given("a scheduled job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
     testRunner.When("the poller runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
     testRunner.Then("the job should be in the Enqueued state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
      testRunner.And("the schedule should not contain it anymore", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
      testRunner.But("the queue should contain the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 13
      testRunner.And("schedule poller should return \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "SchedulePoller")]
        [Xunit.TraitAttribute("Description", "Future jobs should not be enqueued")]
        public virtual void FutureJobsShouldNotBeEnqueued()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Future jobs should not be enqueued", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
    testRunner.Given("a future job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
     testRunner.When("the poller runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
     testRunner.Then("the job should be in the Scheduled state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
      testRunner.And("the schedule should contain the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
      testRunner.And("the queue should not contain the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
      testRunner.And("schedule poller should return \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "SchedulePoller")]
        [Xunit.TraitAttribute("Description", "Poller should enqueue only jobs in the Scheduled state")]
        public virtual void PollerShouldEnqueueOnlyJobsInTheScheduledState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Poller should enqueue only jobs in the Scheduled state", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
    testRunner.Given("a scheduled job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
      testRunner.And("its state is Succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
     testRunner.When("the poller runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
     testRunner.Then("the job should be in the Succeeded state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
      testRunner.And("the queue should not contain the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "SchedulePoller")]
        [Xunit.TraitAttribute("Description", "Should return false when there are no jobs in the schedule")]
        public virtual void ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should return false when there are no jobs in the schedule", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
     testRunner.When("the poller runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
     testRunner.Then("schedule poller should return \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SchedulePollerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SchedulePollerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
