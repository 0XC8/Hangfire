// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HangFire.Tests.Server
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ServerWatchdogFeature : Xunit.IUseFixture<ServerWatchdogFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ServerWatchdog.feature"
#line hidden
        
        public ServerWatchdogFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Server watchdog", "\r\n  As an Administrator, I would like if the crashed servers \r\n  are automaticall" +
                    "y removed.", ProgrammingLanguage.CSharp, new string[] {
                        "redis"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
    testRunner.Given("a server watchdog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void SetFixture(ServerWatchdogFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Server watchdog")]
        [Xunit.TraitAttribute("Description", "It should not remove the active server")]
        public virtual void ItShouldNotRemoveTheActiveServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It should not remove the active server", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 11
    testRunner.Given("a server that was started a day ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
      testRunner.And("its last heartbeat was a second ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
     testRunner.When("the watchdog gets the job done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
     testRunner.Then("the server should not be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Server watchdog")]
        [Xunit.TraitAttribute("Description", "It should remove the server when its last heartbeat timed out")]
        public virtual void ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It should remove the server when its last heartbeat timed out", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 17
    testRunner.Given("a server that was started a day ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
      testRunner.And("its last heartbeat was a day ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
     testRunner.When("the watchdog gets the job done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
     testRunner.Then("the server should be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Server watchdog")]
        [Xunit.TraitAttribute("Description", "It should not remove the recently started server with no heartbeats")]
        public virtual void ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It should not remove the recently started server with no heartbeats", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 23
    testRunner.Given("a server that was started a second ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
      testRunner.And("there are no any heartbeats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
     testRunner.When("the watchdog gets the job done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
     testRunner.Then("the server should not be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Server watchdog")]
        [Xunit.TraitAttribute("Description", "It should remove the long-running server with no heartbeats")]
        public virtual void ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It should remove the long-running server with no heartbeats", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 29
    testRunner.Given("a server that was started a day ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
      testRunner.And("there are no any heartbeats", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
     testRunner.When("the watchdog gets the job done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
     testRunner.Then("the server should be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Server watchdog")]
        [Xunit.TraitAttribute("Description", "It should not remove the recently started server with timed out heartbeat")]
        public virtual void ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It should not remove the recently started server with timed out heartbeat", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 35
    testRunner.Given("a server that was started a second ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
      testRunner.And("its last heartbeat was a day ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
     testRunner.When("the watchdog gets the job done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
     testRunner.Then("the server should not be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Server watchdog")]
        [Xunit.TraitAttribute("Description", "It should remove only those servers that were timed out")]
        public virtual void ItShouldRemoveOnlyThoseServersThatWereTimedOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It should remove only those servers that were timed out", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 41
    testRunner.Given("a server \'Active\' that was started a second ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
      testRunner.And("a server \'TimedOut\' that was started a day ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
     testRunner.When("the watchdog gets the job done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
     testRunner.Then("the server \'TimedOut\' should be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
      testRunner.But("the server \'Active\' should not be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ServerWatchdogFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ServerWatchdogFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
