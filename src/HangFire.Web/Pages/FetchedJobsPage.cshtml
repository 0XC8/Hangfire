@* Generator: Template TypeVisibility: Internal *@
@using System
@using System.Collections.Generic
@using System.Linq
@using Common
@using Pages
@using HangFire.Storage
@using Storage.Monitoring
@inherits RazorPage
@{
    Layout = new LayoutPage
        {
            Title = Queue.ToUpperInvariant(),
            Subtitle = "Fetched jobs",
            Breadcrumbs = new Dictionary<string, string>
                {
                    { "Queues", Request.LinkTo("/queues") },
                    { Queue.ToUpperInvariant(), Request.LinkTo("/queues/" + Queue) }
                },
            BreadcrumbsTitle = "Fetched jobs",    
        };

    int from, perPage;

    int.TryParse(Request.QueryString["from"], out from);
    int.TryParse(Request.QueryString["count"], out perPage);

    Pager pager;
    JobList<FetchedJobDto> fetchedJobs;
    
    using (var monitor = JobStorage.Current.GetMonitoringApi())
    {
        pager = new Pager(from, perPage, monitor.FetchedCount(Queue))
        {
            BasePageUrl = Request.LinkTo("/queues/fetched/" + Queue)
        };

        fetchedJobs = monitor
            .FetchedJobs(Queue, pager.FromRecord, pager.RecordsPerPage);
    }
}

@if (pager.TotalPageCount == 0)
{
    <div class="alert alert-info">
        The queue is empty.
    </div>
}
else
{
    @RenderPartial(new PerPageSelector(pager))
    
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>State</th>
                <th>Job</th>
                <th>Created</th>
                <th>Fetched</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in fetchedJobs)
            {
                <tr>
                    <td>
                        <a href="@Request.LinkTo("/job/" + job.Key)">@HtmlHelper.JobId(job.Key)</a>
                    </td>
                    <td>
                        <span class="label label-default" style="@(JobHistoryRenderer.ForegroundStateColors.ContainsKey(job.Value.State) ? String.Format("background-color: {0};", JobHistoryRenderer.ForegroundStateColors[job.Value.State]) : null)">
                            @job.Value.State</span>
                    </td>
                    <td>
                        <span title="@HtmlHelper.DisplayMethodHint(job.Value.Job)">
                            @HtmlHelper.DisplayMethod(job.Value.Job)
                        </span>
                    </td>
                    <td>
                        @if (job.Value.CreatedAt.HasValue)
                        {
                            <span data-moment="@JobHelper.ToStringTimestamp(job.Value.CreatedAt.Value)">
                                @job.Value.CreatedAt 
                            </span>
                        }
                    </td>
                    <td>
                        @if (job.Value.FetchedAt.HasValue)
                        {
                            <span data-moment="@JobHelper.ToStringTimestamp(job.Value.FetchedAt.Value)">
                                @job.Value.FetchedAt
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
    @RenderPartial(new Paginator(pager))
}