@* Generator: Template TypeVisibility: Internal *@
@using System
@using System.Linq
@using Common
@using Pages
@using HangFire.Storage
@using Storage.Monitoring
@inherits RazorPage
@{
    Layout = new LayoutPage { Title = "Queues" };

    IList<QueueWithTopEnqueuedJobsDto> queues;

    using (var monitor = JobStorage.Current.GetMonitoringApi())
    {
        queues = monitor.Queues();
    }
}

@if (queues.Count == 0)
{
    <div class="alert alert-warning">
        No queued jobs found. Try to enqueue a job.
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Queue</th>
                <th>Length</th>
                <th>Dequeued</th>
                <th>Next jobs</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var queue in queues)
            {
                <tr>
                    <td>
                        <a class="label-queue" href="@Request.LinkTo("/queues/" + queue.Name)">
                            @queue.Name
                        </a>
                    </td>
                    <td>@queue.Length</td>
                    <td>
                        <a href="@Request.LinkTo("/queues/dequeued/" + queue.Name)">
                            @queue.Dequeued    
                        </a>
                    </td>
                    <td>@if (queue.FirstJobs.Count == 0)
                        {
                        <em>No jobs queued.</em>
                        }
                        else
                        {
                        <table class="table table-condensed table-bordered table-inner">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Job</th>
                                    <th>Enqueued</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var job in queue.FirstJobs)
                                {
                                    <tr class="@(!job.Value.InEnqueuedState ? "obsolete-data" : null)">
                                        <td>
                                            <a href="@Request.LinkTo("/job/" + job.Key)">@HtmlHelper.JobId(job.Key)</a>
                                            @if (!job.Value.InEnqueuedState)
                                            {
                                                <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                                            }
                                        </td>
                                        <td>
                                            <span title="@HtmlHelper.DisplayMethodHint(job.Value.MethodData)">
                                                @HtmlHelper.DisplayMethod(job.Value.MethodData)
                                            </span>
                                        </td>
                                        <td>
                                            @if (job.Value.EnqueuedAt.HasValue)
                                            {
                                                <span data-moment="@JobHelper.ToStringTimestamp(job.Value.EnqueuedAt.Value)">
                                                    @job.Value.EnqueuedAt
                                                </span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}