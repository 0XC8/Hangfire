@* Generator: Template TypeVisibility: Internal *@
@using Common
@using Pages
@using HangFire.Storage
@using Storage.Monitoring
@inherits RazorPage
@{
    Layout = new LayoutPage { Title = "Scheduled Jobs" };

    int from, perPage;

    int.TryParse(Request.QueryString["from"], out from);
    int.TryParse(Request.QueryString["count"], out perPage);

    Pager pager;
    JobList<ScheduledJobDto> scheduledJobs;

    using (var monitor = JobStorage.Current.GetMonitoringApi())
    {
        pager = new Pager(from, perPage, monitor.ScheduledCount())
        {
            BasePageUrl = Request.LinkTo("/scheduled")
        };

        scheduledJobs = monitor.ScheduledJobs(pager.FromRecord, pager.RecordsPerPage);
    }
}

@if (pager.TotalPageCount == 0)
{
    <div class="alert alert-info">
        There are no scheduled jobs.
    </div>
}
else
{
    <div class="js-jobs-list">
        <div class="btn-toolbar btn-toolbar-top">
            <button class="js-jobs-list-command btn btn-sm btn-primary"
                    data-url="@Request.LinkTo("/scheduled/enqueue")"
                    data-loading-text="Enqueueing...">
                <span class="glyphicon glyphicon-play"></span>
                Enqueue now
            </button>

            <button class="js-jobs-list-command btn btn-sm btn-default"
                    data-url="@Request.LinkTo("/scheduled/delete")"
                    data-loading-text="Deleting..."
                    data-confirm="Do you really want to DELETE ALL selected jobs?">
                <span class="glyphicon glyphicon-remove"></span>
                Delete selected
            </button>

            @RenderPartial(new PerPageSelector(pager))
        </div>

        <table class="table table-hover">
            <thead>
                <tr>
                    <th class="min-width">
                        <input type="checkbox" class="js-jobs-list-select-all" />
                    </th>
                    <th class="min-width">Id</th>
                    <th>Enqueue</th>
                    <th>Job</th>
                </tr>
            </thead>
            @foreach (var job in scheduledJobs)
            {
                <tr class="js-jobs-list-row @(!job.Value.InScheduledState ? "obsolete-data" : null)">
                    <td>
                        @if (job.Value.InScheduledState)
                        {
                            <input type="checkbox" class="js-jobs-list-checkbox" name="jobs[]" value="@job.Key" />
                        }
                    </td>
                    <td>
                        <a href="@Request.LinkTo("/job/" + job.Key)">
                            @HtmlHelper.JobId(job.Key)
                        </a>
                        @if (!job.Value.InScheduledState)
                        {
                            <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                        }
                    </td>
                    <td data-moment="@JobHelper.ToStringTimestamp(job.Value.EnqueueAt)">@job.Value.EnqueueAt</td>
                    <td>
                        <span title="@HtmlHelper.DisplayMethodHint(job.Value.Job)">
                            @HtmlHelper.DisplayMethod(job.Value.Job)
                        </span>
                    </td>
                </tr>
            }
        </table>
    </div>

    @RenderPartial(new Paginator(pager))
}
