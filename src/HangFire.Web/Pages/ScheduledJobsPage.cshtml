@* Generator: Template TypeVisibility: Internal *@
@using Common
@using Pages
@using HangFire.Storage
@using Storage.Monitoring
@inherits RazorPage
@{
    Layout = new LayoutPage { Title = "Scheduled Jobs" };

    int from, perPage;

    int.TryParse(Request.QueryString["from"], out from);
    int.TryParse(Request.QueryString["count"], out perPage);

    Pager pager;
    JobList<ScheduledJobDto> scheduledJobs;

    using (var monitor = JobStorage.Current.GetMonitoringApi())
    {
        pager = new Pager(from, perPage, monitor.ScheduledCount())
        {
            BasePageUrl = Request.LinkTo("/scheduled")
        };

        scheduledJobs = monitor.ScheduledJobs(pager.FromRecord, pager.RecordsPerPage);
    }
}

@if (pager.TotalPageCount == 0)
{
    <div class="alert alert-info">
        There are no scheduled jobs.
    </div>
}
else
{
    @RenderPartial(new PerPageSelector(pager))

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Enqueue</th>
                <th>Job</th>
                <th></th>
            </tr>
        </thead>
        @foreach (var job in scheduledJobs)
        {
            <tr class="@(!job.Value.InScheduledState ? "obsolete-data" : null)">
                <td>
                    <a href="@Request.LinkTo("/job/" + job.Key)">
                        @HtmlHelper.JobId(job.Key)
                    </a>
                    @if (!job.Value.InScheduledState)
                    {
                        <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                    }
                </td>
                <td data-moment="@JobHelper.ToStringTimestamp(job.Value.EnqueueAt)">@job.Value.EnqueueAt</td>
                <td>
                    <span title="@HtmlHelper.DisplayMethodHint(job.Value.Job)">
                        @HtmlHelper.DisplayMethod(job.Value.Job)
                    </span>
                </td>
                <td>
                    @if (job.Value.InScheduledState)
                    {
                        <div class="pull-right">
                            <button class="btn btn-default btn-sm" data-ajax="@Request.LinkTo("/schedule/enqueue/" + job.Key)" data-loading-text="Enqueueing...">
                                <span class="glyphicon glyphicon-play"></span>
                                Enqueue now
                            </button>

                            <button class="btn btn-death btn-sm" data-ajax="@Request.LinkTo("/schedule/delete/" + job.Key)" data-loading-text="Deleting..." data-confirm="Do you really want to delete a scheduled job?">
                                <span class="glyphicon glyphicon-remove"></span>
                                Delete
                            </button>
                        </div>
                    }
                </td>
            </tr>
        }
    </table>

    @RenderPartial(new Paginator(pager))
}