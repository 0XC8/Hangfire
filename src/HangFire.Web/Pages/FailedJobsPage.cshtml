@* Generator: Template TypeVisibility: Internal *@
@using System
@using Common
@using Pages
@using HangFire.Storage
@using Storage.Monitoring
@inherits RazorPage
@{
    Layout = new LayoutPage { Title = "Failed Jobs" };

    int from, perPage;

    int.TryParse(Request.QueryString["from"], out from);
    int.TryParse(Request.QueryString["count"], out perPage);

    Pager pager;
    JobList<FailedJobDto> failedJobs;

    using (var monitor = JobStorage.Current.GetMonitoringApi())
    {
        pager = new Pager(from, perPage, monitor.FailedCount())
        {
            BasePageUrl = Request.LinkTo("/failed")
        };

        failedJobs = monitor
            .FailedJobs(pager.FromRecord, pager.RecordsPerPage);
    }
}

@if (pager.TotalPageCount == 0)
{
    <div class="alert alert-success">
        You have no failed jobs at the moment.
    </div>
}
else
{
    <div class="js-jobs-list">
        <div class="btn-toolbar btn-toolbar-top">
            <button class="js-jobs-list-command btn btn-sm btn-primary"
                    data-url="@Request.LinkTo("/failed/requeue")"
                    data-loading-text="Enqueueing...">
                <span class="glyphicon glyphicon-repeat"></span>
                Requeue jobs
            </button>
            
            <button class="js-jobs-list-command btn btn-sm btn-default"
                    data-url="@Request.LinkTo("/failed/delete")"
                    data-loading-text="Deleting..."
                    data-confirm="Do you really want to DELETE ALL selected jobs?">
                <span class="glyphicon glyphicon-remove"></span>
                Delete selected
            </button>

            @RenderPartial(new PerPageSelector(pager))
        </div>

        <table class="table failed-table table-hover">
            <thead>
                <tr>
                    <th class="min-width">
                        <input type="checkbox" class="js-jobs-list-select-all" />
                    </th>
                    <th class="min-width">Id</th>
                    <th>Failed</th>
                    <th>Job</th>
                </tr>
            </thead>
            <tbody>
                @{ var index = 0; }
                @foreach (var job in failedJobs)
                {
                    <tr class="js-jobs-list-row @(!job.Value.InFailedState ? "obsolete-data" : null)">
                        <td rowspan="@(job.Value.InFailedState ? "2" : "1")">
                            @if (job.Value.InFailedState)
                            {
                                <input type="checkbox" class="js-jobs-list-checkbox" name="jobs[]" value="@job.Key" />
                            }
                        </td>
                        <td rowspan="@(job.Value.InFailedState ? "2" : "1")">
                            <a href="@Request.LinkTo("/job/" + job.Key)">
                                @HtmlHelper.JobId(job.Key)
                            </a>
                            @if (!job.Value.InFailedState)
                            {
                                <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                            }
                        </td>
                        <td>
                            @if (job.Value.FailedAt.HasValue)
                            {
                                <span data-moment="@JobHelper.ToStringTimestamp(job.Value.FailedAt.Value)">
                                    @job.Value.FailedAt
                                </span>
                            }
                        </td>
                        <td class="@(job.Value.InFailedState ? "expander" : null)">
                            <div>
                                <span title="@HtmlHelper.DisplayMethodHint(job.Value.Job)">
                                    @HtmlHelper.DisplayMethod(job.Value.Job)
                                </span>
                            </div>
                            @if (!String.IsNullOrEmpty(job.Value.ExceptionMessage))
                            {
                                <div style="color: #888;">
                                    @job.Value.Reason <span class="caret"></span>
                                </div>
                            }
                        </td>
                    </tr>
                    if (job.Value.InFailedState)
                    {
                        <tr>
                            <td colspan="2" class="failed-job-details">
                                <div class="expandable" style="@(index++ == 0 ? "display: block;" : null)">
                                    <h4>@job.Value.ExceptionType</h4>
                                    <p>
                                        @job.Value.ExceptionMessage
                                    </p>

                                    @if (!String.IsNullOrEmpty(job.Value.ExceptionDetails))
                                    {
                                        <pre class="stack-trace">@HtmlHelper.MarkupStackTrace(job.Value.ExceptionDetails)</pre>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    @RenderPartial(new Paginator(pager))
}
