@* Generator: Template TypeVisibility: Internal *@
@using System
@using Common
@using Pages
@using HangFire.Storage
@using Storage.Monitoring
@inherits RazorPage
@{
    Layout = new LayoutPage { Title = "Failed Jobs" };

    int from, perPage;

    int.TryParse(Request.QueryString["from"], out from);
    int.TryParse(Request.QueryString["count"], out perPage);

    Pager pager;
    JobList<FailedJobDto> failedJobs;

    using (var monitor = JobStorage.Current.GetMonitoringApi())
    {
        pager = new Pager(from, perPage, monitor.FailedCount())
        {
            BasePageUrl = Request.LinkTo("/failed")
        };

        failedJobs = monitor
            .FailedJobs(pager.FromRecord, pager.RecordsPerPage);
    }
}

@if (pager.TotalPageCount == 0)
{
    <div class="alert alert-success">
        You have no failed jobs at the moment.
    </div>
}
else
{
    @RenderPartial(new PerPageSelector(pager))
    
    <table class="table failed-table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Failed</th>
                <th>Job</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{ var index = 0; }
            @foreach (var job in failedJobs)
            {
                <tr class="@(!job.Value.InFailedState ? "obsolete-data" : null)">
                    <td rowspan="@(job.Value.InFailedState ? "2" : "1")">
                        <a href="@Request.LinkTo("/job/" + job.Key)">
                            @HtmlHelper.JobId(job.Key)
                        </a>
                        @if (!job.Value.InFailedState)
                        {
                            <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                        }
                    </td>
                    <td>
                        @if (job.Value.FailedAt.HasValue)
                        {
                            <span data-moment="@JobHelper.ToStringTimestamp(job.Value.FailedAt.Value)">
                                @job.Value.FailedAt        
                            </span>
                        }
                    </td>
                    <td class="@(job.Value.InFailedState ? "expander" : null)">
                        <div>
                            <span title="@HtmlHelper.DisplayMethodHint(job.Value.Job)">
                                @HtmlHelper.DisplayMethod(job.Value.Job)
                            </span>
                        </div>
                        @if (!String.IsNullOrEmpty(job.Value.ExceptionMessage))
                        {
                            <div style="color: #888;">
                                @job.Value.Reason <span class="caret"></span>
                            </div>
                        }
                    </td>
                    <td>
                        @if (job.Value.InFailedState)
                        {
                            <div class="pull-right">
                                <button class="btn btn-primary btn-sm" data-ajax="@Request.LinkTo("/failed/retry/" + job.Key)" data-loading-text="Retrying...">
                                    <span class="glyphicon glyphicon-repeat"></span>
                                    Retry
                                </button>
                            </div>
                        }
                    </td>
                </tr>
                if (job.Value.InFailedState)
                {
                    <tr>
                        <td colspan="4" class="failed-job-details">
                            <div class="expandable" style="@(index++ == 0 ? "display: block;" : null)">
                                <h4>@job.Value.ExceptionType</h4>
                                <p>
                                    @job.Value.ExceptionMessage
                                </p>
                        
                                @if (!String.IsNullOrEmpty(job.Value.ExceptionDetails))
                                {
                                    <pre class="stack-trace">@HtmlHelper.MarkupStackTrace(job.Value.ExceptionDetails)</pre>
                                }
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    
    @RenderPartial(new Paginator(pager))
}