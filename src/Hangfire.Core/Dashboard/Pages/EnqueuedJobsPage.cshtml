@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: True *@
@using System
@using System.Collections
@using System.Collections.Generic
@using Hangfire.Common
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@inherits RazorPage
@{
    Layout = new LayoutPage(Queue.ToUpperInvariant());

    int from, perPage;

    int.TryParse(Query("from"), out from);
    int.TryParse(Query("count"), out perPage);

    var monitor = Storage.GetMonitoringApi();
    var pager = new Pager(from, perPage, monitor.EnqueuedCount(Queue));
    var enqueuedJobs = monitor.EnqueuedJobs(Queue, pager.FromRecord, pager.RecordsPerPage);
}

<div class="row">
    <div class="col-md-3">
        @Html.JobsSidebar()
    </div>
    <div class="col-md-9">
        @Html.Breadcrumbs(Queue.ToUpperInvariant(), new Dictionary<string, string>
        {
            { "Queues", Url.LinkToQueues() }
        })

        <h1 class="page-header">@Queue.ToUpperInvariant() <small>Enqueued jobs</small></h1>

        @if (pager.TotalPageCount == 0)
        {
            <div class="alert alert-info">
                The queue is empty.
            </div>
        }
        else
        {
            <div class="js-jobs-list">
                <div class="btn-toolbar btn-toolbar-top">
                    <button class="js-jobs-list-command btn btn-sm btn-default"
                            data-url="@Url.To("/jobs/enqueued/delete")"
                            data-loading-text="Deleting..."
                            data-confirm="Do you really want to DELETE ALL selected jobs?">
                        <span class="glyphicon glyphicon-remove"></span>
                        Delete selected
                    </button>

                    @Html.PerPageSelector(pager)
                </div>

                <table class="table">
                    <thead>
                    <tr>
                        <th class="min-width">
                            <input type="checkbox" class="js-jobs-list-select-all"/>
                        </th>
                        <th class="min-width">Id</th>
                        <th class="min-width">State</th>
                        <th>Job</th>
                        <th class="align-right">Enqueued</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var job in enqueuedJobs)
                    {
                        <tr class="js-jobs-list-row hover @(!job.Value.InEnqueuedState ? "obsolete-data" : null)">
                            <td>
                                <input type="checkbox" class="js-jobs-list-checkbox" name="jobs[]" value="@job.Key"/>
                            </td>
                            <td class="min-width">
                                <a href="@Url.JobDetails(job.Key)">
                                    @Html.JobId(job.Key)
                                </a>
                                @if (!job.Value.InEnqueuedState)
                                {
                                    <span title="Job's state has been changed while fetching data." class="glyphicon glyphicon-question-sign"></span>
                                }
                            </td>
                            <td class="min-width">
                                <span class="label label-default" style="@String.Format("background-color: {0};", JobHistoryRenderer.GetForegroundStateColor(job.Value.State))">
                                    @job.Value.State
                                </span>
                            </td>
                            <td>
                                <a class="job-method" href="@Url.JobDetails(job.Key)">
                                    @Html.DisplayJob(job.Value.Job)
                                </a>
                            </td>
                            <td class="align-right">
                                @if (job.Value.EnqueuedAt.HasValue)
                                {
                                    <span data-moment="@JobHelper.ToTimestamp(job.Value.EnqueuedAt.Value)">
                                            @job.Value.EnqueuedAt
                                        </span>
                                }
                                else
                                {
                                    <em>n/a</em>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            @Html.Paginator(pager)
        }
    </div>
</div>