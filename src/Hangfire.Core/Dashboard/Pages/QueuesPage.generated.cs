#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hangfire.Dashboard.Pages
{
    
    #line 2 "..\..\Dashboard\Pages\QueuesPage.cshtml"
    using System;
    
    #line default
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    #line 3 "..\..\Dashboard\Pages\QueuesPage.cshtml"
    using Hangfire.Common;
    
    #line default
    #line hidden
    
    #line 4 "..\..\Dashboard\Pages\QueuesPage.cshtml"
    using Hangfire.Dashboard;
    
    #line default
    #line hidden
    
    #line 5 "..\..\Dashboard\Pages\QueuesPage.cshtml"
    using Hangfire.Dashboard.Pages;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    internal partial class QueuesPage : RazorPage
    {
#line hidden

        public override void Execute()
        {


WriteLiteral("\r\n");







            
            #line 7 "..\..\Dashboard\Pages\QueuesPage.cshtml"
  
    Layout = new LayoutPage("Queues");

    var monitor = Storage.GetMonitoringApi();
    var queues = monitor.Queues();


            
            #line default
            #line hidden
WriteLiteral("\r\n<div class=\"row\">\r\n    <div class=\"col-md-3\">\r\n        ");


            
            #line 16 "..\..\Dashboard\Pages\QueuesPage.cshtml"
   Write(Html.JobsSidebar());

            
            #line default
            #line hidden
WriteLiteral("\r\n    </div>\r\n    <div class=\"col-md-9\">\r\n        <h1 class=\"page-header\">Queues<" +
"/h1>\r\n\r\n");


            
            #line 21 "..\..\Dashboard\Pages\QueuesPage.cshtml"
         if (queues.Count == 0)
        {

            
            #line default
            #line hidden
WriteLiteral("            <div class=\"alert alert-warning\">\r\n                No queued jobs fou" +
"nd. Try to enqueue a job.\r\n            </div>\r\n");


            
            #line 26 "..\..\Dashboard\Pages\QueuesPage.cshtml"
        }
        else
        {

            
            #line default
            #line hidden
WriteLiteral(@"            <table class=""table table-striped"">
                <thead>
                <tr>
                    <th>Queue</th>
                    <th>Length</th>
                    <th>Fetched</th>
                    <th>Next jobs</th>
                </tr>
                </thead>
                <tbody>
");


            
            #line 39 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                 foreach (var queue in queues)
                {

            
            #line default
            #line hidden
WriteLiteral("                    <tr>\r\n                        <td>\r\n                         " +
"   <a class=\"label-queue\" href=\"");


            
            #line 43 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                    Write(Url.Queue(queue.Name));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                ");


            
            #line 44 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                           Write(queue.Name);

            
            #line default
            #line hidden
WriteLiteral("\r\n                            </a>\r\n                        </td>\r\n              " +
"          <td>");


            
            #line 47 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                       Write(queue.Length);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                        <td>\r\n");


            
            #line 49 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                             if (queue.Fetched.HasValue)
                            {

            
            #line default
            #line hidden
WriteLiteral("                                <a href=\"");


            
            #line 51 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                    Write(Url.To("/jobs/enqueued/fetched/" + queue.Name));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                    ");


            
            #line 52 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                               Write(queue.Fetched);

            
            #line default
            #line hidden
WriteLiteral("\r\n                                </a>\r\n");


            
            #line 54 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                            }
                            else
                            {

            
            #line default
            #line hidden
WriteLiteral("                                <em>N/A</em>\r\n");


            
            #line 58 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                            }

            
            #line default
            #line hidden
WriteLiteral("                        </td>\r\n                        <td>\r\n");


            
            #line 61 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                             if (queue.FirstJobs.Count == 0)
                            {

            
            #line default
            #line hidden
WriteLiteral("                                <em>No jobs queued.</em>\r\n");


            
            #line 64 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                            }
                            else
                            {

            
            #line default
            #line hidden
WriteLiteral(@"                                <table class=""table table-condensed table-bordered table-inner"">
                                    <thead>
                                    <tr>
                                        <th class=""min-width"">Id</th>
                                        <th class=""min-width"">State</th>
                                        <th>Job</th>
                                        <th class=""align-right min-width"">Enqueued</th>
                                    </tr>
                                    </thead>
                                    <tbody>
");


            
            #line 77 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                     foreach (var job in queue.FirstJobs)
                                    {

            
            #line default
            #line hidden
WriteLiteral("                                        <tr class=\"");


            
            #line 79 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                               Write(!job.Value.InEnqueuedState ? "obsolete-data" : null);

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                            <td class=\"min-width\">\r\n         " +
"                                       <a href=\"");


            
            #line 81 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                    Write(Url.JobDetails(job.Key));

            
            #line default
            #line hidden
WriteLiteral("\">");


            
            #line 81 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                                              Write(Html.JobId(job.Key));

            
            #line default
            #line hidden
WriteLiteral("</a>\r\n");


            
            #line 82 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                 if (!job.Value.InEnqueuedState)
                                                {

            
            #line default
            #line hidden
WriteLiteral("                                                    <span title=\"Job\'s state has " +
"been changed while fetching data.\" class=\"glyphicon glyphicon-question-sign\"></s" +
"pan>\r\n");


            
            #line 85 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                }

            
            #line default
            #line hidden
WriteLiteral("                                            </td>\r\n                              " +
"              <td class=\"min-width\">\r\n");


            
            #line 88 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                 if (job.Value.State != null)
                                                {

            
            #line default
            #line hidden
WriteLiteral("                                                    <span class=\"label label-defa" +
"ult\" style=\"");


            
            #line 90 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                                                        Write(String.Format("background-color: {0};", JobHistoryRenderer.GetForegroundStateColor(job.Value.State)));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                                        ");


            
            #line 91 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                   Write(job.Value.State);

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                    </span>\r\n");


            
            #line 93 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                }
                                                else
                                                {

            
            #line default
            #line hidden
WriteLiteral("                                                    <em>No state</em>\r\n");


            
            #line 97 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                }

            
            #line default
            #line hidden
WriteLiteral("                                            </td>\r\n                              " +
"              <td>\r\n                                                <a class=\"jo" +
"b-method\" href=\"");


            
            #line 100 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                                       Write(Url.JobDetails(job.Key));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                                    ");


            
            #line 101 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                               Write(Html.DisplayJob(job.Value.Job));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                </a>\r\n                         " +
"                   </td>\r\n                                            <td class=" +
"\"align-right min-width\">\r\n");


            
            #line 105 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                 if (job.Value.EnqueuedAt.HasValue)
                                                {

            
            #line default
            #line hidden
WriteLiteral("                                                    <span data-moment=\"");


            
            #line 107 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                                  Write(JobHelper.ToTimestamp(job.Value.EnqueuedAt.Value));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                                                ");


            
            #line 108 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                           Write(job.Value.EnqueuedAt);

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                            </span>\r\n");


            
            #line 110 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                }
                                                else
                                                {

            
            #line default
            #line hidden
WriteLiteral("                                                    <em>n/a</em>\r\n");


            
            #line 114 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                                }

            
            #line default
            #line hidden
WriteLiteral("                                            </td>\r\n                              " +
"          </tr>\r\n");


            
            #line 117 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                                    }

            
            #line default
            #line hidden
WriteLiteral("                                    </tbody>\r\n                                </t" +
"able>\r\n");


            
            #line 120 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                            }

            
            #line default
            #line hidden
WriteLiteral("                        </td>\r\n                    </tr>\r\n");


            
            #line 123 "..\..\Dashboard\Pages\QueuesPage.cshtml"
                }

            
            #line default
            #line hidden
WriteLiteral("                </tbody>\r\n            </table>\r\n");


            
            #line 126 "..\..\Dashboard\Pages\QueuesPage.cshtml"
        }

            
            #line default
            #line hidden
WriteLiteral("    </div>\r\n</div>");


        }
    }
}
#pragma warning restore 1591
