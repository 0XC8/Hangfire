@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: True *@
@using System
@using System.Linq
@using Hangfire.Common
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@using Hangfire.Dashboard.Resources
@using Hangfire.States
@inherits RazorPage
@{
    var monitor = Storage.GetMonitoringApi();
    var job = monitor.JobDetails(JobId.ToString());

    string title = null;

    if (job != null)
    {
        title = job.Job != null ? Html.JobName(job.Job) : null;
    }

    title = title ?? Strings.Common_Job;
    Layout = new LayoutPage(title);
}

<div class="row">
    <div class="col-md-3">
        @Html.JobsSidebar()
    </div>
    <div class="col-md-9">
        <h1 class="page-header">@title</h1>

        @if (job == null)
        {
            @: @string.Format(Strings.JobDetailsPage_JobExpired, JobId)
        }
        else
        {
            <div class="job-snippet">
                <div class="job-snippet-code">
                    @if (job.CreatedAt.HasValue)
                    {
                        <div class="pull-right job-creation-date">
                            @Strings.JobDetailsPage_Created @Html.RelativeTime(job.CreatedAt.Value)
                        </div>
                    }

                    <pre><code><span class="comment">// @Strings.JobDetailsPage_JobId: @Html.JobId(JobId.ToString(), false)</span>
@JobMethodCallRenderer.Render(job.Job)
</code></pre>
                </div>

                @if (job.Properties.Count > 0)
                {
                    <div class="job-snippet-properties">
                        <dl>
                            @foreach (var property in job.Properties)
                            {
                                <dt>@property.Key</dt>
                                <dd><pre><code>@property.Value</code></pre></dd>
                            }
                        </dl>
                    </div>
                }
            </div>

            if (job.History.Count > 0)
            {
                <h3>
                    <span class="job-snippet-buttons pull-right">
                        <button class="btn btn-sm btn-default" data-ajax="@Url.To("/jobs/actions/requeue/" + JobId)" data-loading-text="@Strings.Common_Enqueueing">@Strings.JobDetailsPage_Requeue</button>
                        <button class="btn btn-sm btn-death" data-ajax="@Url.To("/jobs/actions/delete/" + JobId)" data-loading-text="@Strings.Common_Deleting" data-confirm="@Strings.JobDetailsPage_DeleteConfirm">@Strings.Common_Delete</button>
                    </span>

                    @Strings.JobDetailsPage_State
                </h3>

                var currentState = job.History.Count > 0 ? job.History[0] : null;
                if (currentState != null && currentState.StateName == ProcessingState.StateName)
                {
                    var server = monitor.Servers().FirstOrDefault(x => x.Name == currentState.Data["ServerId"]);
                    if (server == null)
                    {
                        <div class="alert alert-danger">
                            @Html.Raw(String.Format(Strings.JobDetailsPage_JobAbortedNotActive_Warning_Html, currentState.Data["ServerId"], Url.To("/servers")))
                        </div>
                    }
                    else if (server.Heartbeat.HasValue && server.Heartbeat < DateTime.UtcNow.AddMinutes(-1))
                    {
                        <div class="alert alert-warning">
                            @Html.Raw(String.Format(Strings.JobDetailsPage_JobAbortedWithHeartbeat_Warning_Html, server.Name))
                        </div>
                    }
                }

                if (job.ExpireAt.HasValue)
                {
                    <div class="alert alert-info">
                        @Html.Raw(String.Format(Strings.JobDetailsPage_JobFinished_Warning_Html, JobHelper.ToTimestamp(job.ExpireAt.Value), job.ExpireAt))
                    </div>
                }

                var index = 0;

                DateTime[] entriesCreationTime = job.History.Select(x => x.CreatedAt).ToArray();
                var nextEntry = 1;

                foreach (var entry in job.History)
                {
                    var accentColor = JobHistoryRenderer.GetForegroundStateColor(entry.StateName);
                    var backgroundColor = JobHistoryRenderer.GetBackgroundStateColor(entry.StateName);

                    <div class="state-card" style="@(index == 0 ? $"border-color: {accentColor}" : null)">
                        <h4 class="state-card-title">
                            <small class="pull-right text-muted">
                                @{
                                    var duration = Html.ToHumanDuration(entry.CreatedAt - (nextEntry < entriesCreationTime.Length ? entriesCreationTime[nextEntry] : job.CreatedAt));
                                    nextEntry++;
                                }

                                @if (index == 0)
                                {
                                    @Html.Raw($"{Html.RelativeTime(entry.CreatedAt)} (<span data-moment-title=\"{JobHelper.ToTimestamp(entry.CreatedAt)}\">{duration}</span>)")
                                }
                                else
                                {
                                    @: @duration
                                }
                            </small>

                            <span style="@(index == 0 ? $"color: {accentColor}" : null)">@entry.StateName</span>
                        </h4>


                        @if (!String.IsNullOrWhiteSpace(entry.Reason))
                        {
                            <p class="state-card-text text-muted">@entry.Reason</p>
                        }

                        @{
                            var rendered = Html.RenderHistory(entry.StateName, entry.Data);
                        }

                        @if (rendered != null)
                        {
                            <div class="job-history-body" style="@(index == 0 ? $"background-color: {backgroundColor}" : null)">
                                @rendered
                            </div>
                        }
                    </div>

                    index++;
                }
            }
        }
    </div>
</div>