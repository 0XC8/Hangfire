#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hangfire.Dashboard.Pages
{
    
    #line 2 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
    using System;
    
    #line default
    #line hidden
    
    #line 3 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 4 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    using System.Linq;
    using System.Text;
    
    #line 5 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
    using Hangfire.Common;
    
    #line default
    #line hidden
    
    #line 6 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
    using Hangfire.Dashboard;
    
    #line default
    #line hidden
    
    #line 7 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
    using Hangfire.Dashboard.Pages;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    internal partial class EnqueuedJobsPage : RazorPage
    {
#line hidden

        public override void Execute()
        {


WriteLiteral("\r\n");









            
            #line 9 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
  
    Layout = new LayoutPage(Queue.ToUpperInvariant());

    int from, perPage;

    int.TryParse(Query("from"), out from);
    int.TryParse(Query("count"), out perPage);

    var monitor = Storage.GetMonitoringApi();
    var pager = new Pager(from, perPage, monitor.EnqueuedCount(Queue));
    var enqueuedJobs = monitor.EnqueuedJobs(Queue, pager.FromRecord, pager.RecordsPerPage);


            
            #line default
            #line hidden
WriteLiteral("\r\n<div class=\"row\">\r\n    <div class=\"col-md-3\">\r\n        ");


            
            #line 24 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
   Write(Html.JobsSidebar());

            
            #line default
            #line hidden
WriteLiteral("\r\n    </div>\r\n    <div class=\"col-md-9\">\r\n        ");


            
            #line 27 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
   Write(Html.Breadcrumbs(Queue.ToUpperInvariant(), new Dictionary<string, string>
        {
            { "Queues", Url.LinkToQueues() }
        }));

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n        <h1 class=\"page-header\">");


            
            #line 32 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                           Write(Queue.ToUpperInvariant());

            
            #line default
            #line hidden
WriteLiteral(" <small>Enqueued jobs</small></h1>\r\n\r\n");


            
            #line 34 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
         if (pager.TotalPageCount == 0)
        {

            
            #line default
            #line hidden
WriteLiteral("            <div class=\"alert alert-info\">\r\n                The queue is empty.\r\n" +
"            </div>\r\n");


            
            #line 39 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
        }
        else
        {

            
            #line default
            #line hidden
WriteLiteral("            <div class=\"js-jobs-list\">\r\n                <div class=\"btn-toolbar b" +
"tn-toolbar-top\">\r\n                    <button class=\"js-jobs-list-command btn bt" +
"n-sm btn-default\"\r\n                            data-url=\"");


            
            #line 45 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                 Write(Url.To("/jobs/enqueued/delete"));

            
            #line default
            #line hidden
WriteLiteral(@"""
                            data-loading-text=""Deleting...""
                            data-confirm=""Do you really want to DELETE ALL selected jobs?"">
                        <span class=""glyphicon glyphicon-remove""></span>
                        Delete selected
                    </button>

                    ");


            
            #line 52 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
               Write(Html.PerPageSelector(pager));

            
            #line default
            #line hidden
WriteLiteral(@"
                </div>

                <table class=""table"">
                    <thead>
                    <tr>
                        <th class=""min-width"">
                            <input type=""checkbox"" class=""js-jobs-list-select-all""/>
                        </th>
                        <th class=""min-width"">Id</th>
                        <th class=""min-width"">State</th>
                        <th>Job</th>
                        <th class=""align-right"">Enqueued</th>
                    </tr>
                    </thead>
                    <tbody>
");


            
            #line 68 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                     foreach (var job in enqueuedJobs)
                    {

            
            #line default
            #line hidden
WriteLiteral("                        <tr class=\"js-jobs-list-row hover ");


            
            #line 70 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                                      Write(!job.Value.InEnqueuedState ? "obsolete-data" : null);

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                            <td>\r\n                                <input type" +
"=\"checkbox\" class=\"js-jobs-list-checkbox\" name=\"jobs[]\" value=\"");


            
            #line 72 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                                                                                     Write(job.Key);

            
            #line default
            #line hidden
WriteLiteral("\"/>\r\n                            </td>\r\n                            <td class=\"mi" +
"n-width\">\r\n                                <a href=\"");


            
            #line 75 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                    Write(Url.JobDetails(job.Key));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                    ");


            
            #line 76 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                               Write(Html.JobId(job.Key));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                </a>\r\n");


            
            #line 78 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                 if (!job.Value.InEnqueuedState)
                                {

            
            #line default
            #line hidden
WriteLiteral("                                    <span title=\"Job\'s state has been changed whi" +
"le fetching data.\" class=\"glyphicon glyphicon-question-sign\"></span>\r\n");


            
            #line 81 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                }

            
            #line default
            #line hidden
WriteLiteral("                            </td>\r\n                            <td class=\"min-wid" +
"th\">\r\n                                <span class=\"label label-default\" style=\"");


            
            #line 84 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                                                    Write(String.Format("background-color: {0};", JobHistoryRenderer.GetForegroundStateColor(job.Value.State)));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                    ");


            
            #line 85 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                               Write(job.Value.State);

            
            #line default
            #line hidden
WriteLiteral("\r\n                                </span>\r\n                            </td>\r\n   " +
"                         <td>\r\n                                <a class=\"job-met" +
"hod\" href=\"");


            
            #line 89 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                                       Write(Url.JobDetails(job.Key));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                    ");


            
            #line 90 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                               Write(Html.DisplayJob(job.Value.Job));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                </a>\r\n                            </td>\r\n      " +
"                      <td class=\"align-right\">\r\n");


            
            #line 94 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                 if (job.Value.EnqueuedAt.HasValue)
                                {

            
            #line default
            #line hidden
WriteLiteral("                                    <span data-moment=\"");


            
            #line 96 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                                  Write(JobHelper.ToTimestamp(job.Value.EnqueuedAt.Value));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                            ");


            
            #line 97 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                       Write(job.Value.EnqueuedAt);

            
            #line default
            #line hidden
WriteLiteral("\r\n                                        </span>\r\n");


            
            #line 99 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                }
                                else
                                {

            
            #line default
            #line hidden
WriteLiteral("                                    <em>n/a</em>\r\n");


            
            #line 103 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                }

            
            #line default
            #line hidden
WriteLiteral("                            </td>\r\n                        </tr>\r\n");


            
            #line 106 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                    }

            
            #line default
            #line hidden
WriteLiteral("                    </tbody>\r\n                </table>\r\n            </div>\r\n");


            
            #line 110 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
            
            
            #line default
            #line hidden
            
            #line 110 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
       Write(Html.Paginator(pager));

            
            #line default
            #line hidden
            
            #line 110 "..\..\Dashboard\Pages\EnqueuedJobsPage.cshtml"
                                  
        }

            
            #line default
            #line hidden
WriteLiteral("    </div>\r\n</div>");


        }
    }
}
#pragma warning restore 1591
