// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HangFire.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ServerFiltersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ServerFilters.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Server filters", "", ProgrammingLanguage.CSharp, new string[] {
                        "redis"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Server filters")))
            {
                HangFire.Tests.ServerFiltersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Server filters should be executed when the worker performs the job")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Server filters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Server filters should be executed when the worker performs the job", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
    testRunner.Given("an enqueued job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
      testRunner.And("a server filter \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
     testRunner.When("the manager processes the next job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Method"});
            table1.AddRow(new string[] {
                        "test::OnPerforming"});
            table1.AddRow(new string[] {
                        "test::OnPerformed"});
#line 8
     testRunner.Then("the server filter methods should be executed in the following order:", ((string)(null)), table1, "Then ");
#line 12
      testRunner.And("the job should be performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Multiple server filters should be executed depending on their order")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Server filters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple server filters should be executed depending on their order", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
    testRunner.Given("an enqueued job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
      testRunner.And("a server filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
      testRunner.And("a server filter \'second\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
     testRunner.When("the manager processes the next job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Method"});
            table2.AddRow(new string[] {
                        "first::OnPerforming"});
            table2.AddRow(new string[] {
                        "second::OnPerforming"});
            table2.AddRow(new string[] {
                        "second::OnPerformed"});
            table2.AddRow(new string[] {
                        "first::OnPerformed"});
#line 19
     testRunner.Then("the server filter methods should be executed in the following order:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Server filter should be able to cancel the performing of a job")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Server filters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void ServerFilterShouldBeAbleToCancelThePerformingOfAJob()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Server filter should be able to cancel the performing of a job", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
    testRunner.Given("an enqueued job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
      testRunner.And("a server filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
      testRunner.And("a server filter \'second\' that cancels the performing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
      testRunner.And("a server filter \'third\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
     testRunner.When("the manager processes the next job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
     testRunner.Then("the job should not be performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Method"});
            table3.AddRow(new string[] {
                        "first::OnPerforming"});
            table3.AddRow(new string[] {
                        "second::OnPerforming"});
            table3.AddRow(new string[] {
                        "first::OnPerformed (with the canceled flag set)"});
#line 33
      testRunner.And("only the following server filter methods should be executed:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Server filter\'s OnPerformed could be skipped if there was an exception")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Server filters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Server filter\'s OnPerformed could be skipped if there was an exception", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
    testRunner.Given("an enqueued job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
      testRunner.And("a server filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
      testRunner.And("a server filter \'second\' that throws an exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
     testRunner.When("the manager processes the next job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Method"});
            table4.AddRow(new string[] {
                        "first::OnPerforming"});
            table4.AddRow(new string[] {
                        "second::OnPerforming"});
            table4.AddRow(new string[] {
                        "first::OnPerformed"});
#line 44
     testRunner.Then("only the following server filter methods should be executed:", ((string)(null)), table4, "Then ");
#line 49
      testRunner.And("the state of the job should be Failed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Server filter can handle the exception")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Server filters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void ServerFilterCanHandleTheException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Server filter can handle the exception", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
    testRunner.Given("an enqueued job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
      testRunner.And("a server filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
      testRunner.And("a server filter \'second\' that handles an exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
      testRunner.And("a server filter \'third\' that throws an exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
     testRunner.When("the manager processes the next job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Method"});
            table5.AddRow(new string[] {
                        "first::OnPerforming"});
            table5.AddRow(new string[] {
                        "second::OnPerforming"});
            table5.AddRow(new string[] {
                        "third::OnPerforming"});
            table5.AddRow(new string[] {
                        "second::OnPerformed"});
            table5.AddRow(new string[] {
                        "first::OnPerformed"});
#line 57
     testRunner.Then("the server filter methods should be executed in the following order:", ((string)(null)), table5, "Then ");
#line 64
      testRunner.And("the state of the job should be Succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Server exception filters are executed when there was an exception while performin" +
            "g a job")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Server filters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Server exception filters are executed when there was an exception while performin" +
                    "g a job", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
    testRunner.Given("an enqueued broken job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
      testRunner.And("a server exception filter \'test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
     testRunner.When("the manager processes the next job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
     testRunner.Then("the server exception filter should be executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
      testRunner.And("the state of the job should be Failed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Multiple server exception filters are executed depending on their order")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Server filters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple server exception filters are executed depending on their order", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
    testRunner.Given("an enqueued broken job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
      testRunner.And("a server exception filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
      testRunner.And("a server exception filter \'second\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
     testRunner.When("the manager processes the next job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter"});
            table6.AddRow(new string[] {
                        "first"});
            table6.AddRow(new string[] {
                        "second"});
#line 78
     testRunner.Then("the server exception filters should be executed in the following order:", ((string)(null)), table6, "Then ");
#line 82
      testRunner.And("the state of the job should be Failed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Server exception filter can handle the exception")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Server filters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void ServerExceptionFilterCanHandleTheException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Server exception filter can handle the exception", ((string[])(null)));
#line 84
this.ScenarioSetup(scenarioInfo);
#line 85
    testRunner.Given("an enqueued broken job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
      testRunner.And("a server exception filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
      testRunner.And("a server exception filter \'second\' that handles an exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
      testRunner.And("a server exception filter \'third\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
     testRunner.When("the manager processes the next job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter"});
            table7.AddRow(new string[] {
                        "first"});
            table7.AddRow(new string[] {
                        "second"});
            table7.AddRow(new string[] {
                        "third"});
#line 90
     testRunner.Then("the following server exception filters should be executed:", ((string)(null)), table7, "Then ");
#line 95
      testRunner.And("the state of the job should be Succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
