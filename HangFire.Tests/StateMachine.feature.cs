// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HangFire.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class StateMachineFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StateMachine.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "State machine", "", ProgrammingLanguage.CSharp, new string[] {
                        "redis"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "State machine")))
            {
                HangFire.Tests.StateMachineFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The state of the job should be changed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void TheStateOfTheJobShouldBeChanged()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The state of the job should be changed", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
      testRunner.And("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
     testRunner.Then("the job state should be changed to \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The new state should be applied")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void TheNewStateShouldBeApplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The new state should be applied", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
      testRunner.And("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
     testRunner.Then("the \'Test\' state should be applied to the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("An old state should be unapplied")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void AnOldStateShouldBeUnapplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An old state should be unapplied", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
      testRunner.And("a job in the \'Old\' state with registered descriptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
     testRunner.Then("the old state should be unapplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The state entry should contain the state name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void TheStateEntryShouldContainTheStateName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The state entry should contain the state name", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
      testRunner.And("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table1.AddRow(new string[] {
                        "State",
                        "Test"});
#line 26
     testRunner.Then("the job\'s state entry should contain the following items:", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The job history should be appended")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void TheJobHistoryShouldBeAppended()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The job history should be appended", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
      testRunner.And("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table2.AddRow(new string[] {
                        "CreatedAt",
                        "<UtcNow timestamp>"});
            table2.AddRow(new string[] {
                        "State",
                        "Test"});
            table2.AddRow(new string[] {
                        "Reason",
                        "SomeReason"});
#line 34
     testRunner.Then("the last history entry should contain the following items:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("the job history record and the state entry should contain the state properties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the job history record and the state entry should contain the state properties", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table3.AddRow(new string[] {
                        "Server",
                        "TestServer"});
            table3.AddRow(new string[] {
                        "Worker",
                        "#3"});
#line 41
    testRunner.Given("a \'Test\' state with the following properties:", ((string)(null)), table3, "Given ");
#line 45
      testRunner.And("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
     testRunner.Then("the last history entry should contain all of the above properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
      testRunner.And("the state entry should contain all of the above properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("the state should not be changed if allowed current states array does not contain " +
            "the current state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the state should not be changed if allowed current states array does not contain " +
                    "the current state", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
      testRunner.And("a job in the \'Old\' state with registered descriptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
     testRunner.When("I change the state of the job to the \'Test\' allowing only transition from the \'En" +
                    "queued\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
     testRunner.Then("the job should be in the Old state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
      testRunner.And("the old state should not be unapplied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
      testRunner.And("the \'Test\' state should not be applied to the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("State changing filters should be executed in the order they were defined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("State changing filters should be executed in the order they were defined", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
    testRunner.Given("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
      testRunner.And("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
      testRunner.And("a state changing filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
      testRunner.And("a state changing filter \'second\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Filter"});
            table4.AddRow(new string[] {
                        "first"});
            table4.AddRow(new string[] {
                        "second"});
#line 64
     testRunner.Then("changing filters should be executed in the following order:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The state changing filters should be able to modify the state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void TheStateChangingFiltersShouldBeAbleToModifyTheState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The state changing filters should be able to modify the state", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
    testRunner.Given("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
      testRunner.And("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
      testRunner.And("a state changing filter \'first\' that changes the state to the \'AnotherTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
     testRunner.Then("the job state should be changed to \'AnotherTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
      testRunner.And("the \'Test\' state should not be applied to the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
      testRunner.And("the \'AnotherTest\' state should be applied to the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table5.AddRow(new string[] {
                        "State",
                        "AnotherTest"});
#line 77
      testRunner.And("the job\'s state entry should contain the following items:", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The job history should contain every changed state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void TheJobHistoryShouldContainEveryChangedState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The job history should contain every changed state", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
    testRunner.Given("a job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
      testRunner.And("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
      testRunner.And("a state changing filter \'first\' that changes the state to the \'AnotherTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
      testRunner.And("a state changing filter \'second\' that changes the state to the \'YetAnotherTest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "State"});
            table6.AddRow(new string[] {
                        "YetAnotherTest"});
            table6.AddRow(new string[] {
                        "AnotherTest"});
            table6.AddRow(new string[] {
                        "Test"});
#line 87
     testRunner.Then("the history for the following states should be added:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The state of the unexisting job should not be changed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void TheStateOfTheUnexistingJobShouldNotBeChanged()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The state of the unexisting job should not be changed", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 94
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 95
     testRunner.When("I change the state of the \'unexisting\' job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 96
     testRunner.Then("the \'Test\' state should not be applied to the job", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Changing filters are should not be executed for unexisting job")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Changing filters are should not be executed for unexisting job", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line 99
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
      testRunner.And("a state changing filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
     testRunner.When("I change the state of the \'unexisting\' job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
     testRunner.Then("changing filters should not be executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Changing filters should not be executed if the transition is not allowed for the " +
            "current state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Changing filters should not be executed if the transition is not allowed for the " +
                    "current state", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line 105
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
      testRunner.And("a job in the \'Old\' state with registered descriptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
      testRunner.And("a state changing filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
     testRunner.When("I change the state of the job to the \'Test\' allowing only transition from the \'En" +
                    "queued\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
     testRunner.Then("changing filters should not be executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("State applied filters should be executed in the order they were defined")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("State applied filters should be executed in the order they were defined", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
      testRunner.And("a job in the \'Old\' state with registered descriptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
      testRunner.And("a state applied filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
      testRunner.And("a state applied filter \'second\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Method"});
            table7.AddRow(new string[] {
                        "first::OnStateUnapplied"});
            table7.AddRow(new string[] {
                        "second::OnStateUnapplied"});
            table7.AddRow(new string[] {
                        "first::OnStateApplied"});
            table7.AddRow(new string[] {
                        "second::OnStateApplied"});
#line 117
     testRunner.Then("state applied filter methods should be executed in the following order:", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("OnStateUnapplied method should not be called when the state is empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "State machine")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("redis")]
        public virtual void OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OnStateUnapplied method should not be called when the state is empty", ((string[])(null)));
#line 124
this.ScenarioSetup(scenarioInfo);
#line 125
    testRunner.Given("a \'Test\' state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
      testRunner.And("a job with empty state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
      testRunner.And("a state applied filter \'first\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
     testRunner.When("I change the state of the job to the \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Method"});
            table8.AddRow(new string[] {
                        "first::OnStateApplied"});
#line 129
     testRunner.Then("state applied filter methods should be executed in the following order:", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
