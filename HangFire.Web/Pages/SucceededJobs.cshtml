@* Generator: Template TypeVisibility: Internal *@

@using Pages
@inherits RazorPage
@{
    Layout = new LayoutPage { Title = "Succeeded Jobs" };

    int from, perPage;

    int.TryParse(Request.QueryString["from"], out from);
    int.TryParse(Request.QueryString["count"], out perPage);

    var pager = new Pager(from, perPage, JobStorage.SucceededListCount())
    {
        BaseLink = Request.LinkTo("/succeeded")
    };

    var succeededJobs = JobStorage.SucceededJobs(pager.From, pager.PerPage);
}

@if (pager.TotalPages == 0)
{
    <div class="alert alert-warning">
        <p>
            Список завершенных заданий пуст.
    </div>
}
else
{
    <div class="btn-toolbar btn-toolbar-top">
        <div class="btn-group pull-right paginator">
            @foreach (var count in new[] { 10, 20, 50, 100 })
            {
                <a class="btn btn-default @(count == pager.PerPage ? "active" : null)" 
                    href="@pager.PerPageLink(count)">@count</a>    
            }
        </div>
        <div class="btn-group pull-right">
            <span class="btn">Jobs per page:</span>
        </div>
    </div>
    
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Type</th>
                <th>Queue</th>
                <th>Args</th>
                <th>Succeeded at</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in succeededJobs)
            {
                <tr>
                    <td>
                        <a href="@Request.LinkTo("/job/" + job.Key)">
                            @HtmlHelper.JobId(job.Key)
                        </a>
                    </td>

                    @if (job.Value == null)
                    {
                        <td colspan="4">The job was expired. 
                        </td>
                    }
                    else
                    {    
                        <td>@HtmlHelper.JobType(job.Value.Type)</td>
                        <td>@HtmlHelper.QueueLabel(job.Value.Queue)</td>
                        <td>
                            <code>
                                @HtmlHelper.FormatProperties(job.Value.Args)
                            </code>
                        </td>
                        <td>@job.Value.SucceededAt</td>
                    }
                </tr>
            }
        </tbody>
    </table>
    
    <div class="btn-toolbar">
        @if (pager.TotalPages > 1)
        {
            <div class="btn-group paginator">
                <a href="@pager.PreviousPageLink" 
                   class="btn btn-default @(!pager.HasPreviousPage ? "disabled" : null)">&laquo;</a>

                @for (var i = 1; i <= pager.TotalPages; i++)
                {
                    <a class="btn btn-default @(pager.CurrentPage == i ? "active" : null)" 
                       href="@pager.PageLink(i)">@i</a>
                }

                <a href="@pager.NextPageLink" 
                   class="btn btn-default @(!pager.HasNextPage ? "disabled" : null)">&raquo;</a>
            </div>
        }

        <div class="btn-group">
            <span class="btn">Total jobs: @pager.Total</span>
        </div>
    </div>
}