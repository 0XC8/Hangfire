@* Generator: Template TypeVisibility: Internal *@
@using System
@using Pages
@inherits RazorPage
@{
    Layout = new LayoutPage { Title = "Failed Jobs" };

    int from, perPage;

    int.TryParse(Request.QueryString["from"], out from);
    int.TryParse(Request.QueryString["count"], out perPage);

    var pager = new Pager(from, perPage, JobStorage.FailedCount())
    {
        BaseLink = Request.LinkTo("/failed")
    };

    var failedJobs = JobStorage.FailedJobs(pager.From, pager.PerPage);
}

@if (pager.TotalPages == 0)
{
    <div class="alert alert-success">
        Yay! You have no failed jobs.
    </div>
}
else
{
    <div class="btn-toolbar btn-toolbar-top">
        <div class="btn-group pull-right paginator">
            @foreach (var count in new[] { 10, 20, 50, 100 })
            {
                <a class="btn btn-default @(count == pager.PerPage ? "active" : null)" 
                    href="@pager.PerPageLink(count)">@count</a>    
            }
        </div>
        <div class="btn-group pull-right">
            <span class="btn">Jobs per page:</span>
        </div>
    </div>
    
    <table class="table failed-table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Failed at</th>
                <th>Queue</th>
                <th>Type</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{ var index = 0; }
            @foreach (var job in failedJobs)
            {
                <tr>
                    <td>
                        <a href="@Request.LinkTo("/job/" + job.Key)">
                            @HtmlHelper.JobId(job.Key)
                        </a>
                    </td>
                    <td data-moment="@JobHelper.ToStringTimestamp(job.Value.FailedAt.Value)">@job.Value.FailedAt</td>
                    <td>@HtmlHelper.QueueLabel(job.Value.Queue)</td>
                    <td class="expand-exception">
                        <div>
                            @HtmlHelper.JobType(job.Value.Type)
                        </div>
                        <div style="color: #888;">
                            @job.Value.ExceptionMessage <span class="caret"></span>
                        </div>
                    </td>
                    <td>
                        <div class="pull-right">
                            <button class="btn btn-primary btn-sm" data-ajax="@Request.LinkTo("/failed/retry/" + job.Key)" data-loading-text="Retrying...">
                                <span class="glyphicon glyphicon-repeat"></span>
                                Retry
                            </button>

                            <button class="btn btn-danger btn-sm" data-ajax="@Request.LinkTo("/failed/remove/" + job.Key)" data-loading-text="Deleting...">
                                <span class="glyphicon glyphicon-remove"></span>
                            </button>
                        </div>
                    </td>
                </tr>
                <tr style="@(index++ > 0 ? "display: none;" : null)">
                    <td colspan="5" class="failed-job-details">
                        <h4>@job.Value.ExceptionType</h4>
                        <p>
                            @job.Value.ExceptionMessage
                        </p>
                        
                        @if (!String.IsNullOrEmpty(job.Value.ExceptionDetails))
                        {
                            <pre class="stack-trace">@HtmlHelper.MarkupStackTrace(job.Value.ExceptionDetails)</pre>
                        }

                        <h4>Job Arguments</h4>
                        <table class="table table-bordered table-striped table-condensed">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var arg in job.Value.Args)
                                {
                                    <tr>
                                        <td>@arg.Key</td>
                                        <td><code>@arg.Value</code></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
    <div class="btn-toolbar">
        @if (pager.TotalPages > 1)
        {
            <div class="btn-group paginator">
                <a href="@pager.PreviousPageLink" 
                   class="btn btn-default @(!pager.HasPreviousPage ? "disabled" : null)">&laquo;</a>

                @for (var i = 1; i <= pager.TotalPages; i++)
                {
                    <a class="btn btn-default @(pager.CurrentPage == i ? "active" : null)" 
                       href="@pager.PageLink(i)">@i</a>
                }

                <a href="@pager.NextPageLink" 
                   class="btn btn-default @(!pager.HasNextPage ? "disabled" : null)">&raquo;</a>
            </div>
        }

        <div class="btn-group">
            <span class="btn">Total jobs: @pager.Total</span>
        </div>
    </div>
}