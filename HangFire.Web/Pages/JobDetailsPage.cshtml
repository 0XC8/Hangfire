@* Generator: Template TypeVisibility: Internal *@
@using System
@using System.Linq
@using System.Runtime.CompilerServices
@using System.Web
@using Common
@using Pages
@inherits RazorPage
@{
    var job = JobStorage.JobDetails(JobId.ToString());

    string title = null;

    if (job != null && job.Method != null)
    {
        title = HtmlHelper.DisplayMethod(job.Method);
    }

    title = title ?? "Job";

    Layout = new LayoutPage { Title = title, Subtitle = JobId.ToString() };

}

@if (job == null)
{
    @: The job with id '@JobId' was expired or was not existed on the server.
}
else
{
    <div class="job-snippet">
        <div class="job-snippet-code">
            @if (job.CreatedAt.HasValue)
            {
                <div class="pull-right job-creation-date"
                     data-moment="@JobHelper.ToStringTimestamp(job.CreatedAt.Value)"
                     title="Created at"></div>
            }
            @if (job.Method != null)
            {
                <pre><code>@HtmlHelper.FormatJob(job.Method, job.Arguments, job.OldFormatArguments)</code></pre>
            }
            <div class="clearfix"></div>
        </div>

        @if (job.Properties.Count > 0)
        {
            <div class="job-snippet-properties">
                <dl>
                    @foreach (var property in job.Properties)
                    {
                        <dt>@property.Key</dt>
                        <dd><pre>@property.Value</pre></dd>
                    }
                </dl>
            </div>
        }
    </div>

    if (job.History.Count > 0)
    {
        <h3>History</h3>
        var index = 0;
        foreach (var entry in job.History)
        {
            var background = JobHistoryRenderer.BackgroundStateColors.ContainsKey(entry["State"])
               ? JobHistoryRenderer.BackgroundStateColors[entry["State"]]
               : null;

            if (index == 0)
            {
                background = JobHistoryRenderer.ForegroundStateColors.ContainsKey(entry["State"])
                    ? JobHistoryRenderer.ForegroundStateColors[entry["State"]]
                    : null;
            }

            <div class="job-history @(index == 0 ? "job-history-current" : null)">
                <div class="job-history-heading" style="@(background != null ? String.Format("background-color: {0};", background) : null)">
                    <span class="pull-right" data-moment="@entry["CreatedAt"]">@JobHelper.FromStringTimestamp(entry["CreatedAt"])</span>
                    <h4 class="job-history-title">
                        @entry["State"]

                        @if (!String.IsNullOrEmpty(entry["Reason"]))
                        {
                            <small>@entry["Reason"]</small>
                        }
                    </h4>
                </div>

                @if (JobHistoryRenderer.Exists(entry["State"]))
                {
                    var rendered = JobHistoryRenderer.Render(entry["State"], entry);
                    if (rendered != null)
                    {
                        <div class="job-history-body">
                            @rendered
                        </div>
                    }
                }
                else
                {
                    <div class="job-history-body">
                        <dl class="dl-horizontal">
                            @foreach (var item in entry.Where(x => x.Key != "State" && x.Key != "Date" && x.Key != "Reason"))
                            {
                                <dt>@item.Key:</dt>
                                <dd>@item.Value</dd>
                            }
                        </dl>
                    </div>
                }
            </div>

                index++;
        }
    }
}