@* Generator: Template TypeVisibility: Internal *@
@using System
@using System.Linq
@using Pages
@inherits RazorPage
@{
    Layout = new LayoutPage { Title = "Job", Subtitle = JobId.ToString() };
    var job = JobStorage.JobDetails(JobId.ToString());
}

@if (job == null)
{
    @: The job with id '@JobId' was expired or was not existed on the server.
}
else
{
    <h3>
        <span class="label label-default" style="@(JobHistoryRenderer.ForegroundStateColors.ContainsKey(job.State) ? String.Format("background-color: {0};", JobHistoryRenderer.ForegroundStateColors[job.State]) : null)">
            @job.State</span>
        <small>
            @HtmlHelper.JobType(job.Type)
        </small>
    </h3>
    
    if (job.Arguments.Count > 0)
    {
    <table class="table table-condensed table-bordered table-striped">
        <thead>
            <tr>
                <th class="width-200">Name</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var arg in job.Arguments)
            {
                <tr>
                    <td>@arg.Key</td>
                    <td><code>@arg.Value</code></td>
                </tr>
            }
        </tbody>
    </table>
    }

    if (job.Properties.Count > 0)
    {
    <h3>Properties</h3>
    <table class="table table-condensed table-bordered table-striped">
        <thead>
            <tr>
                <th class="width-200">Name</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var property in job.Properties)
            {
                <tr>
                    <td>@property.Key</td>
                    <td><code>@property.Value</code></td>
                </tr>
            }
        </tbody>
    </table>
    }

    if (job.History.Count > 0)
    {
    <h3>History</h3>
        foreach (var entry in job.History)
        {
    <div class="job-history">
        <div class="job-history-heading" style="@(JobHistoryRenderer.BackgroundStateColors.ContainsKey(entry["State"]) ? String.Format("background-color: {0};", JobHistoryRenderer.BackgroundStateColors[entry["State"]]) : null)">
            <span class="pull-right" data-moment="@entry["CreatedAt"]">@JobHelper.FromStringTimestamp(entry["CreatedAt"])</span>
            <h4 class="job-history-title">
                @entry["State"]

                @if (!String.IsNullOrEmpty(entry["Reason"]))
                {
                    <small>@entry["Reason"]</small>
                }
            </h4>
        </div>

        @if (JobHistoryRenderer.Exists(entry["State"]))
        {
            var rendered = JobHistoryRenderer.Render(entry["State"], entry);
            if (rendered != null)
            {
            <div class="job-history-body">
                @rendered
            </div>
            }
        }
        else
        {
            <div class="job-history-body">
                <dl class="dl-horizontal">
                    @foreach (var item in entry.Where(x => x.Key != "State" && x.Key != "Date" && x.Key != "Reason"))
                    {
                        <dt>@item.Key:</dt>
                        <dd>@item.Value</dd>
                    }
                </dl>
            </div>
        }
    </div>
        }
    }
}