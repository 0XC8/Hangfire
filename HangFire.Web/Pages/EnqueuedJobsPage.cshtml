@* Generator: Template TypeVisibility: Internal *@
@using System
@using System.Collections.Generic
@using System.Linq
@using Pages
@inherits RazorPage
@{
    Layout = new LayoutPage
        {
            Title = QueueName, 
            Subtitle = "Enqueued jobs",
            Breadcrumbs = new Dictionary<string, string>
                {
                    { "Queues", Request.LinkTo("/queues") }
                }
        };

    int from, perPage;

    int.TryParse(Request.QueryString["from"], out from);
    int.TryParse(Request.QueryString["count"], out perPage);

    var pager = new Pager(from, perPage, JobStorage.EnqueuedCount(QueueName))
    {
        BasePageUrl = Request.LinkTo("/queues/" + QueueName)
    };

    var enqueuedJobs = JobStorage.EnqueuedJobs(QueueName, pager.FromRecord, pager.RecordsPerPage);
}

@if (pager.TotalPageCount == 0)
{
    <div class="alert alert-info">
        The queue is empty.
    </div>
}
else
{
    @RenderPartial(new PerPageSelector(pager))
    
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Type</th>
                <th>Args</th>
                <th>Enqueued At</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in enqueuedJobs)
            {
                <tr>
                    <td><a href="@Request.LinkTo("/job/" + job.Key)">@HtmlHelper.JobId(job.Key)</a></td>
                    <td>@HtmlHelper.JobType(job.Value.Type)</td>
                    <td><pre>@HtmlHelper.FormatProperties(job.Value.Args)</pre></td>
                    <td data-moment="@JobHelper.ToStringTimestamp(job.Value.EnqueuedAt)">@job.Value.EnqueuedAt</td>
                </tr>
            }
        </tbody>
    </table>
    
    @RenderPartial(new Paginator(pager))
}