<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Go" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildProjectDirectory)\Build.tasks" />
  <Import Project="HangFire.Projects.Properties.proj" Condition=" '$(OS)' == 'Windows_NT' " />

  <PropertyGroup>
    <Configuration Condition="$(Configuration) == ''">Debug</Configuration>
    <Nightly Condition="$(Nightly) == ''">true</Nightly>
    <ProjectRoot>$(MSBuildProjectDirectory)\..</ProjectRoot>
    <ArtifactsDir>$(ProjectRoot)\artifacts\$(Configuration)</ArtifactsDir>
    <ProjectArtifactsDir>$(ArtifactsDir)\projects</ProjectArtifactsDir>
    <PackageSrcDir>$(ArtifactsDir)\package-src</PackageSrcDir>
    <PackagesDestinationDir>$(ArtifactsDir)\packages</PackagesDestinationDir>
    <FxCopDir>$(ArtifactsDir)\fxcop</FxCopDir>
    <NuspecsSource>$(ProjectRoot)\nuspecs</NuspecsSource>
    <NuspecsDestination>$(ArtifactsDir)\nuspecs</NuspecsDestination>
    <TestResultsPath>$(ArtifactsDir)\TestResults</TestResultsPath>
    <ContentPath>$(ProjectRoot)\Content</ContentPath>
    <NuGetToolsPath>$(ProjectRoot)\.nuget</NuGetToolsPath>
    <NuGetExePath>$(NuGetToolsPath)\nuget.exe</NuGetExePath>
    <MSBuildCommunityTasksPath>$(MSBuildProjectDirectory)</MSBuildCommunityTasksPath>
    <ToolsPath>$(ProjectRoot)\tools\</ToolsPath>
    <XunitPath>$(ToolsPath)xunit\</XunitPath>
  </PropertyGroup>

  <Import Project="$(MSBuildProjectDirectory)\HangFire.versions.targets" />
  <Import Project="$(MSBuildProjectDirectory)\MSBuild.Community.Tasks.Targets" />

  <!-- Add extra properties to the build for signing -->
  <!--PropertyGroup Condition="Exists('$(KeyFile)')">
    <ExtraProperties>KeyFile=$(KeyFile)</ExtraProperties>
  </PropertyGroup-->

  <PropertyGroup>
    <PrereleaseTagWithSeparator Condition="$(BuildQuality) != ''">-$(BuildQuality)</PrereleaseTagWithSeparator>
    <AssemblyVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)</AssemblyVersion>
    <PackageVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)$(PrereleaseTagWithSeparator)</PackageVersion>
  </PropertyGroup>

  <ItemGroup>
    <!-- Add any src projects that have not been defined manually -->
    <Projects Include="$(ProjectRoot)\src\**\*.csproj" Exclude="@(Projects)" />

    <!-- Add any sample projects that have not been defined manually -->
    <Projects Include="$(ProjectRoot)\samples\**\*.csproj" Exclude="@(Projects)">
      <Sample>true</Sample>
    </Projects>
  </ItemGroup>

  <ItemGroup>
    <UnitTestProjects Include="$(ProjectRoot)\tests\HangFire.Core.Tests\HangFire.Core.Tests.csproj"></UnitTestProjects>
    <UnitTestProjects Include="$(ProjectRoot)\tests\HangFire.Redis.Tests\HangFire.Redis.Tests.csproj"></UnitTestProjects>
    <UnitTestProjects Include="$(ProjectRoot)\tests\HangFire.SqlServer.Tests\HangFire.SqlServer.Tests.csproj"></UnitTestProjects>
  </ItemGroup>

  <ItemGroup>
    <RegexTransform Include="$(ProjectRoot)\src\Common\SharedAssemblyInfo.cs">
      <Find>AssemblyVersion\("\d+\.\d+\.\d+"\)</Find>
      <ReplaceWith>AssemblyVersion("$(AssemblyVersion)")</ReplaceWith>
    </RegexTransform>
    <RegexTransform Include="$(ProjectRoot)\src\Common\SharedAssemblyInfo.cs">
      <Find>AssemblyInformationalVersion\("\d+\.\d+\.\d+(-\w+\d*(-\d+)?)?"\)</Find>
      <ReplaceWith>AssemblyInformationalVersion("$(PackageVersion)")</ReplaceWith>
    </RegexTransform>
  </ItemGroup>

  <Target Name="UpdateVersion">
    <RegexTransform Items="@(RegexTransform)" />
  </Target>

  <UsingTask AssemblyFile="$(XunitPath)xunit.runner.msbuild.dll"
             TaskName="Xunit.Runner.MSBuild.xunit" />
  
  <Target Name="CI" DependsOnTargets="Build; CopyArtifacts; RunAppVeyorTests; BuildPackages">
  </Target>

  <Target Name="Go" DependsOnTargets="Build; CopyArtifacts; RunTests;">
  </Target>

  <Target Name="BuildCmd" DependsOnTargets="Build; CopyArtifacts; RunUnitTests;">
  </Target>

  <Target Name="BuildNetUnitTests" DependsOnTargets="CreateOutputDirs">
    <MSBuild Projects="%(UnitTestProjects.Identity)"
             Targets="Build"
             Properties="Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);SolutionDir=$(ProjectRoot)\;$(ExtraProperties);"
             Condition=" '$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="BuildNetFunctionalTests" DependsOnTargets="CreateOutputDirs">
    <MSBuild Projects="%(FunctionalTestProjects.Identity)"
             Targets="Build"
             Properties="Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);SolutionDir=$(ProjectRoot)\;$(ExtraProperties)"
             Condition=" '$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="RunUnitTests" DependsOnTargets="BuildNetUnitTests">
    <xunit Assembly="$(ProjectArtifactsDir)\HangFire.Core.Tests\HangFire.Core.Tests.dll"
           Xml="$(TestResultsPath)\HangFire.Core.Tests.XunitResults.xml"
           Verbose="true" />
    <xunit Assembly="$(ProjectArtifactsDir)\HangFire.Redis.Tests\HangFire.Redis.Tests.dll"
           Xml="$(TestResultsPath)\HangFire.Redis.Tests.XunitResults.xml"
           Verbose="true" />
    <xunit Assembly="$(ProjectArtifactsDir)\HangFire.SqlServer.Tests\HangFire.SqlServer.Tests.dll"
           Xml="$(TestResultsPath)\HangFire.SqlServer.Tests.XunitResults.xml"
           Verbose="true" />
  </Target>

  <Target Name="RunFunctionalTests" DependsOnTargets="BuildNetFunctionalTests">
  </Target>

  <Target Name="RunTests" DependsOnTargets="RunUnitTests; RunFunctionalTests;">
  </Target>

  <Target Name="RunAppVeyorTests" DependsOnTargets="BuildNetUnitTests">
    <Exec Command="xunit.console &quot;$(ProjectArtifactsDir)\HangFire.Core.Tests\HangFire.Core.Tests.dll&quot; /appveyor"
          LogStandardErrorAsError="true">
	  </Exec>
    <Exec Command="xunit.console &quot;$(ProjectArtifactsDir)\HangFire.Redis.Tests\HangFire.Redis.Tests.dll&quot; /appveyor"
          LogStandardErrorAsError="true">
    </Exec>
    <Exec Command="xunit.console &quot;$(ProjectArtifactsDir)\HangFire.SqlServer.Tests\HangFire.SqlServer.Tests.dll&quot; /appveyor"
          LogStandardErrorAsError="true">
    </Exec>
  </Target>

  <Target Name="CreateOutputDirs">
    <RemoveDir Directories="$(ArtifactsDir)" Condition="Exists('$(ArtifactsDir)')" ContinueOnError="true" />
    <MakeDir Directories="$(ArtifactsDir)" Condition="!Exists('$(ArtifactsDir)')" />
    <MakeDir Directories="$(PackagesDestinationDir)" Condition="!Exists('$(PackagesDestinationDir)')" />
    <MakeDir Directories="$(TestResultsPath)" Condition="!Exists('$(TestResultsPath)')" />
  </Target>

  <Target Name="Build" DependsOnTargets="CreateOutputDirs">
    <MSBuild Projects="@(Projects)"
             Targets="%(BuildTargets)"
             Properties="%(BuildProperties)"
             Condition="%(Build) And '$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="CopyArtifacts" DependsOnTargets="Build">
    <ItemGroup>
      <!-- Copy remaining package artifacts to artifacts/{Configuration}/package-src/{Platform}/ -->
      <Artifacts Include="$(ProjectArtifactsDir)\%(Projects.FileName)\HangFire.*.dll;
                          $(ProjectArtifactsDir)\%(Projects.FileName)\HangFire.*.pdb;
                          $(ProjectArtifactsDir)\%(Projects.FileName)\HangFire.*.xml"
                 Condition="%(Projects.CopyArtifacts) And !%(Projects.Sample)">
        <Destination>$(PackageSrcDir)\%(Projects.Platform)</Destination>
      </Artifacts>
      <!-- Copy exe's to artifacts/{Configuration}/package-src/tools/ -->
      <Artifacts Include="$(ProjectArtifactsDir)\%(Projects.FileName)\*.exe"
                 Condition="%(Projects.CopyArtifacts) And !%(Projects.Sample)">
        <Destination>$(PackageSrcDir)\Tools</Destination>
      </Artifacts>
      <!-- Copy combined/minified JS, sql scripts and READMEs to artifacts/{Configuration}/package-src/Content/ -->
      <Artifacts Include="$(ProjectRoot)\src\HangFire.SqlServer\Install.sql;
                          $(ContentPath)\HangFireConfig.cs.pp;
                          $(ContentPath)\web.config.transform">
        <Destination>$(PackageSrcDir)\Content</Destination>
      </Artifacts>
      <!-- Copy samples to artifacts/{Configuration}/samples while keeping directory structure -->
      <Artifacts Include="$(ProjectArtifactsDir)\%(Projects.FileName)\**\*.*" Condition="%(Projects.Sample)">
        <Destination>$(SamplesDir)\%(Projects.FileName)</Destination>
      </Artifacts>
      <!-- Copy nuspecs to artifacts/nuspecs -->
      <Artifacts Include="$(NuspecsSource)\*.nuspec">
        <Destination>$(NuspecsDestination)</Destination>
      </Artifacts>
    </ItemGroup>

    <Copy SourceFiles="@(Artifacts)" DestinationFiles="@(Artifacts->'%(Destination)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>
  
  <!-- Required to restore solution-level packages -->
  <Import Project="$(ProjectRoot)\.nuget\nuget.targets" />

  <Target Name="BuildPackages" DependsOnTargets="CopyArtifacts">
    <ItemGroup>
      <Nuspecs Include="$(NuspecsDestination)\*.nuspec" />
      <NuspecTransform Include="@(Nuspecs)">
        <Find>__HANGFIRE_PACKAGE_VERSION__</Find>
        <ReplaceWith>$(PackageVersion)</ReplaceWith>
      </NuspecTransform>
    </ItemGroup>

    <RegexTransform Items="@(NuspecTransform)" />
    <Exec Command="&quot;$(NuGetExePath)&quot; pack &quot;%(Nuspecs.Identity)&quot; -o &quot;$(PackagesDestinationDir)&quot; -basePath &quot;$(PackageSrcDir)&quot;"
            LogStandardErrorAsError="true" />
  </Target>
  
</Project>